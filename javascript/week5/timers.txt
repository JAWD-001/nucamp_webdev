timers allow us to delay the execution of some code for a specific 
amount of time

setTimeout()
setTimeout(callbackFunctionName, duration)
* includes two parameters (theFunctionNameBeingCalled, waitDuration)
* functionBeingCalled, does not include the parenthesis as it is not being called when
* DOM is loaded (this is a callbackfunction)
* waitDuration is in milliseconds

const timerEx = setTimeout(waitTimer, 1000)



clearTimeout()

clearTimeout(callbackFunctionName, duration)
* we can provide the numeric timerID that is automatically generated by the 
* setTimeout() function which is assigned to the variable calling the timer.


clearTimeout(timerEx);




setInterval()
* this method repeats the given function instead of just running it once 
* (like a repeated setTimeout())
* though it uses the given wait duration between function calls
* set up just like setTimeout(callbackFunctionName, waitDuration)

clearInterval()
* clearInterval is the same as clearTimeout, but for interval. 
* Make sure to assign setInterval() to a variable in order to call the unique id
